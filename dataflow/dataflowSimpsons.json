{
	"name": "dataflowSimpsons",
	"properties": {
		"folder": {
			"name": "Simpsons"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Entrada_characters",
						"type": "DatasetReference"
					},
					"name": "EntradaCharacters"
				},
				{
					"dataset": {
						"referenceName": "Entrada_locations",
						"type": "DatasetReference"
					},
					"name": "EntradaLocations"
				},
				{
					"dataset": {
						"referenceName": "Entrada_scripts",
						"type": "DatasetReference"
					},
					"name": "EntradaScripts"
				},
				{
					"dataset": {
						"referenceName": "Entrada_episodes",
						"type": "DatasetReference"
					},
					"name": "entradaEpisodes"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SalidaCharacters",
						"type": "DatasetReference"
					},
					"name": "sinkCharacters"
				},
				{
					"dataset": {
						"referenceName": "SalidaEpisodesScripts",
						"type": "DatasetReference"
					},
					"name": "sinkEpisodesScripts"
				},
				{
					"dataset": {
						"referenceName": "SalidaLocationsScripts",
						"type": "DatasetReference"
					},
					"name": "sinkLocationsScripts"
				}
			],
			"transformations": [
				{
					"name": "SelectCharacters"
				},
				{
					"name": "FilterNulls"
				},
				{
					"name": "SelectLocations"
				},
				{
					"name": "SelectScripts"
				},
				{
					"name": "JoinLocationsScripts"
				},
				{
					"name": "SelectEpisodes"
				},
				{
					"name": "joinEpisodesScripts"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          normalized_name as string,",
				"          gender as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EntradaCharacters",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          normalized_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EntradaLocations",
				"source(output(",
				"          id as integer,",
				"          episode_id as integer,",
				"          number as string,",
				"          raw_text as string,",
				"          timestamp_in_ms as integer,",
				"          speaking_line as string,",
				"          character_id as integer,",
				"          location_id as integer,",
				"          raw_character_text as string,",
				"          raw_location_text as string,",
				"          spoken_words as string,",
				"          normalized_text as string,",
				"          word_count as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EntradaScripts",
				"source(output(",
				"          id as integer,",
				"          image_url as string,",
				"          imdb_rating as string,",
				"          imdb_votes as string,",
				"          number_in_season as string,",
				"          number_in_series as string,",
				"          original_air_date as string,",
				"          original_air_year as string,",
				"          production_code as string,",
				"          season as string,",
				"          title as string,",
				"          us_viewers_in_millions as string,",
				"          video_url as string,",
				"          views as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> entradaEpisodes",
				"EntradaCharacters select(mapColumn(",
				"          id,",
				"          name = normalized_name,",
				"          gender",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCharacters",
				"SelectCharacters filter(gender!=\"Null\") ~> FilterNulls",
				"EntradaLocations select(mapColumn(",
				"          id,",
				"          name = normalized_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectLocations",
				"EntradaScripts select(mapColumn(",
				"          id,",
				"          episode_id,",
				"          number,",
				"          raw_text,",
				"          timestamp_in_ms,",
				"          speaking_line,",
				"          character_id,",
				"          location_id,",
				"          raw_location_text,",
				"          spoken_words,",
				"          word_count",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectScripts",
				"SelectLocations, SelectScripts join(SelectLocations@id == location_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinLocationsScripts",
				"entradaEpisodes select(mapColumn(",
				"          id,",
				"          image_url,",
				"          imdb_rating,",
				"          number_in_season,",
				"          original_air_date,",
				"          title,",
				"          us_viewers_in_millions,",
				"          video_url,",
				"          views",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectEpisodes",
				"SelectEpisodes, SelectScripts join(SelectEpisodes@id == episode_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEpisodesScripts",
				"FilterNulls sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movieId as integer,",
				"          title as string,",
				"          genres as string,",
				"          year as integer",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkCharacters",
				"joinEpisodesScripts sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movieId as integer,",
				"          title as string,",
				"          genres as string,",
				"          year as integer",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkEpisodesScripts",
				"JoinLocationsScripts sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movieId as integer,",
				"          title as string,",
				"          genres as string,",
				"          year as integer",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkLocationsScripts"
			]
		}
	}
}